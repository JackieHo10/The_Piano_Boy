""" This module generates notes for a midi file using the
    trained neural network """
import pickle
import numpy as np
from music21 import instrument, note, stream, chord, pitch
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import Activation

sequence_length = 100

def generate():
    """ Generate a piano midi file """
    #load the notes used to train the model
    with open('data/notes', 'rb') as filepath:
        notes = pickle.load(filepath)

    network_input, network_input_normalize = prepare_sequences(notes)
    model = create_network(network_input_normalize)
    prediction_output = generate_notes(model, network_input)
    create_midi(prediction_output)

def prepare_sequences(notes):
    """ Prepare the sequences used by the Neural Network """
    

    network_input = []
    network_output = []

    # create input sequences and the corresponding outputs
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append(sequence_in)
        network_output.append(sequence_out)

    n_patterns = len(network_input)
    #print(n_patterns)
    # reshape the input into a format compatible with LSTM layers
    network_input_normalize = np.reshape(network_input, (n_patterns, sequence_length, 88))
    return (network_input, network_input_normalize)

def create_network(network_input):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        return_sequences=True
    ))
    model.add(Dropout(0.3))
    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.3))
    model.add(LSTM(512))
    model.add(Dense(256))
    model.add(Dropout(0.3))
    model.add(Dense(88))
    model.add(Activation('sigmoid'))
    model.compile(loss='binary_crossentropy', optimizer='rmsprop')
    
    # Load the weights to each node
    model.load_weights('weights-improvement-199-0.0021-bigger.hdf5')
    return model

def generate_notes(model, network_input):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = np.random.randint(0, len(network_input)-1)

    pattern = network_input[start]
    prediction_output = []
    threshold = 0.8
    # generate 500 notes
    for note_index in range(500):
        prediction_input = np.reshape(pattern, (1, sequence_length, 88))
        prediction = model.predict(prediction_input, verbose=0)[0]
        prediction[prediction > threshold] = 1
        prediction[prediction <= threshold] = 0   
        pattern = np.append(pattern, prediction)[88:]    
        #print(prediction)
        prediction_output.append(prediction)
    return prediction_output

import time
current_time = lambda: int(round(time.time()))

def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []
    #print(prediction_output)
    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        indices = np.where(pattern > 0)[0]
        if len(indices) > 0:
            notes = []
            for index in indices:
                n = note.Note()
                p = pitch.Pitch()
                p.midi = index + 21
                n.pitch = p
                n.storedInstrument = instrument.Piano()
                notes.append(n)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
       
        # increase offset each iteration so that notes do not stack
        offset += 0.25

    midi_stream = stream.Stream(output_notes)

    midi_stream.write('midi', fp='test_output_{}.mid'.format(current_time()))
    
if __name__ == '__main__':
    generate()